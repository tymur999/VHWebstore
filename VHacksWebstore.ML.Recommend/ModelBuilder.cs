// This file was auto-generated by ML.NET Model Builder.
using System.Collections.Generic;
using System.IO;
using Microsoft.ML;

namespace VHacksWebstoreML.Model
{
    public static class ModelBuilder
    {
        private static string TRAIN_DATA_FILEPATH = @"C:\Users\Tymur\Downloads\Grocery_and_Gourmet_Food.csv";
        private static string MODEL_FILE = ConsumeModel.MLNetModelPath;

        // Create MLContext to be shared across the model creation workflow objects 
        // Set a random seed for repeatable/deterministic results across multiple trainings.
        private static readonly MLContext mlContext = new(seed: 1);

        public static void CreateModel(IEnumerable<ModelInput> input)
        {
            // Load Data
            IDataView trainingDataView = mlContext.Data.LoadFromEnumerable(input);

                // Build training pipeline
            IEstimator<ITransformer> trainingPipeline = BuildTrainingPipeline(mlContext);

            // Train Model
            ITransformer mlModel = TrainModel(mlContext, trainingDataView, trainingPipeline);
            
            // Save Model
            mlContext.Model.Save(mlModel, trainingDataView.Schema, Path.GetFullPath(MODEL_FILE));
        }

        public static IEstimator<ITransformer> BuildTrainingPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations 
            var dataProcessPipeline = mlContext.Transforms.Conversion.MapValueToKey("col0", "col0")
                                      .Append(mlContext.Transforms.Conversion.MapValueToKey("col1", "col1"));
            // Set the training algorithm 
            var trainer = mlContext.Recommendation().Trainers.MatrixFactorization(labelColumnName: @"col2", matrixColumnIndexColumnName: @"col1", matrixRowIndexColumnName: @"col0");

            var trainingPipeline = dataProcessPipeline.Append(trainer);

            return trainingPipeline;
        }

        public static ITransformer TrainModel(MLContext mlContext, IDataView trainingDataView, IEstimator<ITransformer> trainingPipeline)
        {

            ITransformer model = trainingPipeline.Fit(trainingDataView);
            
            return model;
        }

        /*
        public static void PrintRegressionFoldsAverageMetrics(IEnumerable<TrainCatalogBase.CrossValidationResult<RegressionMetrics>> crossValidationResults)
        {
            var L1 = crossValidationResults.Select(r => r.Metrics.MeanAbsoluteError);
            var L2 = crossValidationResults.Select(r => r.Metrics.MeanSquaredError);
            var RMS = crossValidationResults.Select(r => r.Metrics.RootMeanSquaredError);
            var lossFunction = crossValidationResults.Select(r => r.Metrics.LossFunction);
            var R2 = crossValidationResults.Select(r => r.Metrics.RSquared);
        }
        */
    }
}
